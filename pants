#!/usr/bin/env python
# ==================================================================================================
# Copyright 2011 Twitter, Inc.
# --------------------------------------------------------------------------------------------------
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this work except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file, or at:
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==================================================================================================

"""Pants build system bootstrap script.

This script downloads then exec's a pre-built pants pex. Its intended for
users of the pants build system. If 'pants.pex' exists in the current
directory that version is used instead of fetching a pex.

The following pants.ini configuration options are used from the DEFAULT section.

* pants_version - version number, such as '0.0.7'
* pants_pex_baseurl - URL of the pants pex repository to fetch from.
* pants_pex_filename_pattern - Pants PEX filename pattern if different from the
                               default value. This option is not typically used.
* pants_pex_verify_md5: A boolean flag which instructs to md5sum
                        verification after fetching the pex.
"""

# NB: gyrations are made to support bootstrapping into python2.6 or python2.7
# from interpreters ranging from python2.4 to python3.x

import logging
import os
import sys


logger = logging.getLogger()
formatter = logging.Formatter("%(asctime)s %(filename)s:%(lineno)d - %(message)s")
stream_handler = logging.StreamHandler(sys.stderr)
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)

if os.getenv('PANTS_DEV'):
  logger.setLevel(logging.DEBUG)
else:
  logger.setLevel(logging.INFO)

major, minor = sys.version_info[0:2]


def error(msg, code=1):
  logger.error(msg)
  sys.exit(code)


def get_python(ver):
  for path in os.environ['PATH'].split(os.pathsep):
    exe = os.path.join(path, ver)
    if os.path.isfile(exe) and os.access(exe, os.X_OK):
      return exe
  return None


def restart(exe):
  logger.debug('selected %s in bootstrapping from python%d.%d' % (exe, major, minor))
  os.execv(exe, [exe] + sys.argv)


# Check to see if user exported python version manually
exported_py_ver = os.environ.get('PY')
if exported_py_ver:
  try:
    exported_major, exported_minor = map(int, exported_py_ver.split('.'))
  except ValueError:
    error('Exported PY variable is not of the form #.# (e.g. 2.7)')
  if not (exported_major, exported_minor) == (major, minor):
    exe = get_python('python%d.%d' % (exported_major, exported_minor))
    if not exe:
      error('Cannot execute the python you specified via PY=%s' % exported_py_ver)
    restart(exe)
elif major == 2 or major == 3:
  if get_python('python2.6') is not None:
    if minor != 6:
      restart(get_python('python2.6'))
  elif get_python('python2.7') is not None:
    if minor != 7:
      restart(get_python('python2.7'))

if (major, minor) != (2, 6) and (major, minor) != (2, 7):
  error("Pants requires a valid python2.6 or python2.7. Found python%s.%s" % (major, minor))


# At this point, it's ensured that script will be executed by python2.6 or python2.7

import errno
import tarfile
import tempfile
import time
import hashlib
import urllib2

from ConfigParser import SafeConfigParser as ConfigParser

CONFIG_FILE = 'pants.ini'

if not os.path.exists(CONFIG_FILE):
  sys.exit(''.join([
    '%s does not exist in the current directory. ' % CONFIG_FILE,
    'Please run %s from the directory that contains ' % os.path.basename(__file__),
    'the pants.ini you wish to use.',
  ]))

config = ConfigParser({
  'pants_pex_filename_pattern': 'pants-%s-py%s%s.pex',
  'pants_pex_verify_md5': False
})

config.read(CONFIG_FILE)


def get_required(config, key, raw=False):
  """Get options from the DEFAULT config file section.

  :param config: ``ConfigParser`` instance to get the option from.
  :param string: Name of the option to get.
  :param boolean raw: Suppress variable interpolation when getting the option.
  :returns: The value for ``key``.
  """
  if not config.has_option('DEFAULT', key):
    error('Required %s key DEFAULT.%s is not present. Please add the option and try again.' % (
      CONFIG_FILE, key))
  return config.get('DEFAULT', key, raw=raw)


# Use pants.pex if in the repo - primarily for development
LOCAL_PEX = os.path.exists('pants.pex')
PANTS_CACHE = os.path.expanduser('~/.pants.d')

if not LOCAL_PEX:
  PANTS_VERSION = get_required(config, 'pants_version')
  PANTS_PEX_BASEURL = get_required(config, 'pants_pex_baseurl')
  PANTS_PEX_FILENAME_PATTERN = get_required(config, 'pants_pex_filename_pattern', raw=True)
  PANTS_PEX_FILENAME = PANTS_PEX_FILENAME_PATTERN % (PANTS_VERSION, major, minor)
  PANTS_PEX_VERIFY_MD5 = config.getboolean('DEFAULT', 'pants_pex_verify_md5')


def get_md5sum(path):
  """Calculate the md5sum of the path"""
  md5 = hashlib.md5()
  MD5_CHUNK_READ_SIZE = 128 * md5.block_size
  fd = open(path, 'rb')
  for chunk in iter(lambda: fd.read(MD5_CHUNK_READ_SIZE), ''):
    md5.update(chunk)
  fd.close()
  return md5.hexdigest()


def get_published_md5sum():
  """Get the md5sum published at pants_pex_baseurl"""
  md5sum_url = os.path.join(PANTS_PEX_BASEURL, PANTS_VERSION, 'MD5SUM')
  try:
    req = urllib2.urlopen(md5sum_url)
    contents = req.read()
    req.close()
  except (urllib2.URLError, urllib2.HTTPError):
    error("Failed to download MD5SUM for verification")

  content_dict = dict()
  for line in filter(None, contents.splitlines()):
    pex_name, md5_hash = map(lambda value: value.strip(), line.split())
    content_dict[pex_name] = md5_hash

  try:
    return content_dict[PANTS_PEX_FILENAME]
  except KeyError:
    error("MD5SUM entry for %s not found." % PANTS_PEX_FILENAME)


def verify_md5sum(local_path):
  return get_md5sum(local_path) == get_published_md5sum()


def fetch(url, dest, mode=None):
  """returns true if url was fetched, false if already cached"""

  chunk_size = 102400
  md5_verification_error = -1

  if os.path.exists(dest):
    logger.debug('already cached %s at %s' % (url, dest))
    return False

  try:
    os.makedirs(os.path.dirname(dest))
  except OSError:
    _, e, _ = sys.exc_info()
    if e.errno != errno.EEXIST:
      raise e

  tmp_fh, tmp_path = tempfile.mkstemp(dir=os.path.dirname(dest))
  try:
    try:
      logger.debug('fetching %s to %s' % (url, tmp_path))
      u = urllib2.urlopen(url)
      try:
        size = int(u.info().getheader('Content-Length').strip())
        sys.stderr.write('Reading %.2fKB from %s\n' % (size / 1024.0, url))
        size = 0
        while True:
          sys.stderr.write('.')
          chunk = u.read(chunk_size)
          if not chunk:
            sys.stderr.write('. (%.2fKB)\n' % (size / 1024.0))
            break
          else:
            size += len(chunk)
            os.write(tmp_fh, chunk)
      finally:
        u.close()
      os.close(tmp_fh)

      info = os.stat(tmp_path)
      if size != info.st_size:
        error('Failed to fetch %s : expected %d bytes, got %d' % (url, size, info.st_size))

      if PANTS_PEX_VERIFY_MD5 and verify_md5sum(tmp_path) == False:
        error("Failed md5sum verification of the download. Please run this script again to retry.",
              md5_verification_error)

      os.rename(tmp_path, dest)
    except urllib2.HTTPError:
      _, e, _ = sys.exc_info()
      error('Failed to fetch %s : %s' % (url, e))
  finally:
    if os.path.exists(tmp_path):
      os.unlink(tmp_path)

  if mode:
    os.chmod(dest, mode)
  logger.debug('deposited %s at %s' % (url, dest))
  return True


def fetch_pants():
  if LOCAL_PEX:
    return 'pants.pex'

  pants_pex_cached_filename = '%s/bin/pants.pex/%s' % (PANTS_CACHE, PANTS_PEX_FILENAME)
  if os.path.exists(pants_pex_cached_filename):
    return pants_pex_cached_filename

  url = os.path.join(PANTS_PEX_BASEURL, PANTS_VERSION, PANTS_PEX_FILENAME)
  execute_perms = 493  # 0o755
  fetch(url, pants_pex_cached_filename, execute_perms)
  return pants_pex_cached_filename


def main():
  logger.debug('Running with python version: %s.%s' % (major, minor))
  logger.debug('launching %s' % fetch_pants())
  os.execv(fetch_pants(), sys.argv)


if __name__ == '__main__':
  main()
